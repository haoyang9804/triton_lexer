a = [
      "def fused_recurrent_linear_attn_fwd_kernel(",
      "    q,",
      "    k,",
      "    v,",
      "    o,",
      "    h0,",
      "    ht,",
      "    scale,",
      "    T,",
      "    B: tl.constexpr,",
      "    H: tl.constexpr,",
      "    K: tl.constexpr,",
      "    V: tl.constexpr,",
      "    BK: tl.constexpr,",
      "    BV: tl.constexpr,",
      "    USE_INITIAL_STATE: tl.constexpr,",
      "    STORE_FINAL_STATE: tl.constexpr,",
      "):",
      "    i_v, i_k, i_bh = tl.program_id(0), tl.program_id(1), tl.program_id(2)",
      "",
      "    p_q = q + i_bh * T * K + i_k * BK + tl.arange(0, BK)",
      "    p_k = k + i_bh * T * K + i_k * BK + tl.arange(0, BK)",
      "    p_v = v + i_bh * T * V + i_v * BV + tl.arange(0, BV)",
      "    p_o = o + (i_bh + i_k * B * H) * T * V + i_v * BV + tl.arange(0, BV)",
      "",
      "    mask_bk = (i_k * BK + tl.arange(0, BK)) < K",
      "    mask_bv = (i_v * BV + tl.arange(0, BV)) < V",
      "    mask_kv = mask_bk[None, :] & mask_bv[:, None]",
      "",
      "    b_h = tl.zeros([BV, BK], dtype=tl.float32)",
      "",
      "    if USE_INITIAL_STATE:",
      "        p_h0 = (",
      "            h0",
      "            + i_bh * K * V",
      "            + (i_k * BK + tl.arange(0, BK)[None, :]) * V",
      "            + (i_v * BV + tl.arange(0, BV)[:, None])",
      "        )",
      "        b_h += tl.load(p_h0, mask=mask_kv, other=0).to(tl.float32)",
      "",
      "    for _ in range(0, T):",
      "        b_k = tl.load(p_k, mask=mask_bk, other=0).to(tl.float32)",
      "        b_v = tl.load(p_v, mask=mask_bv, other=0).to(tl.float32)",
      "        b_q = tl.load(p_q, mask=mask_bk, other=0).to(tl.float32) * scale",
      "",
      "        b_h += b_k[None, :] * b_v[:, None]",
      "        b_o = b_h * b_q[None, :]",
      "        b_o = tl.sum(b_o, axis=1)",
      "        tl.store(p_o, b_o.to(p_o.dtype.element_ty), mask=mask_bv)",
      "",
      "        p_q += K",
      "        p_k += K",
      "        p_o += V",
      "        p_v += V",
      "",
      "    if STORE_FINAL_STATE:",
      "        p_ht = (",
      "            ht",
      "            + i_bh * K * V",
      "            + (i_k * BK + tl.arange(0, BK)[None, :]) * V",
      "            + (i_v * BV + tl.arange(0, BV)[:, None])",
      "        )",
      "        tl.store(p_ht, b_h.to(p_ht.dtype.element_ty), mask=mask_kv)"
]

program = '\n'.join(a)
print(program)

