%{
%}

%token <string> ID
%token <int> INT
%token <float> FLOAT
%token <string> STRING
%token EOF KERNEL_SEP
%token DEF IF ELSE ELIF FOR IN RANGE RETURN NOT AND OR IS NONE TRUE FALSE
%token INT_TYPE FLOAT_TYPE STR_TYPE BOOL_TYPE TUPLE_TYPE LIST_TYPE DICT_TYPE SET_TYPE
%token UNION
%token MIN PRINT SUM ANY ALL ABS MAX ROUND DIVMOD LEN ZIP SLICE
%token STR TYPE ISINSTANCE TUPLE LIST DICT SET TORCH DL LIBDEVICE LIBSHMEM_DEVICE
%token TRITON_HELPERS LANGUAGE TRITON CEIL_DIV EXP LOG ATOMIC_ADD ATOMIC_CAS
%token ATOMIC_MIN ATOMIC_XCHG LD ST TID SYNC_THREADS SHFL_DOWN_SYNC_I32
%token SHFL_UP_SYNC_I32 SHFL_SYNC_I32 BALLOT_SYNC FFS
%token TL_ARANGE TL_ATOMIC_ADD TL_ATOMIC_CAS TL_ATOMIC_MIN TL_ATOMIC_XCHG
%token TL_ASSUME TL_BFLOAT16 TL_BROADCAST_TO TL_CAST TL_CDIV TL_CONSTEXPR
%token TL_CUMSUM TL_DEBUG_BARRIER TL_DEVICE_ASSERT TL_DOT TL_DOT_SCALED
%token TL_DTYPE TL_EXP TL_EXPERIMENTAL_DESCRIPTOR_LOAD TL_EXPERIMENTAL_DESCRIPTOR_STORE
%token TL_EXTRA_CUDA_LIBDEVICE_ROUND TL_FDIV TL_FLOAT16 TL_FLOAT32 TL_FLOAT8E4NV
%token TL_FLOAT8E5 TL_FLIP TL_FLOOR TL_FMA TL_FULL TL_INT16 TL_INT2 TL_INT32
%token TL_INT64 TL_INT8 TL_INTERLEAVE TL_JOIN TL_LOAD TL_LOG TL_LOG2
%token TL_MAKE_BLOCK_PTR TL_MAKE_TENSOR_DESCRIPTOR TL_MATH_EXP2 TL_MATH_FAST_EXPF
%token TL_MATH_LOG2 TL_MATH_MAX TL_MATH_RSQRT TL_MAX TL_MAX_CONTIGUOUS
%token TL_MAXIMUM TL_MIN TL_MINIMUM TL_MULTIPLE_OF TL_NUM_PROGRAMS TL_PABS
%token TL_PERMUTE TL_PI32_T TL_POINTER_TYPE TL_PROGRAM_ID TL_RAND TL_RANGE
%token TL_RESHAPE TL_RSQRT TL_SIGMOID TL_SPLIT TL_SQRT TL_STANDARD_LOG2
%token TL_STATIC_ASSERT TL_STATIC_PRINT TL_STATIC_RANGE TL_STORE TL_SUM
%token TL_SWIZZLE2D TL_TENSOR TL_TO TL_TRANS TL_UINT32 TL_VIEW TL_WHERE TL_ZEROS
%token PLUS MINUS TIMES DIVIDE GT LT EQ ASSIGN LPAREN RPAREN LBRACE RBRACE COLON COMMA

%start <token list> tokens

%%

// tokens:
//   | h = header* b = body* EOF { h @ [KERNEL_SEP] @ b @ [EOF] }
//   ;

// header:
//   | DEF id = ID LPAREN params = param_list RPAREN COLON { DEF ID id LPAREN params RPAREN COLON }
//   ;

// param_list:
//   | { [] }
//   | p = param { [p] }
//   | p = param COMMA pl = param_list { p :: pl }
//   ;

// param:
//   | id = ID { ID id }
//   | id = ID EQ id2 = ID { ID id EQ ID id2 }
//   | id = ID EQ l = literal { ID id EQ l } //TODO: only support literal for now, support expr later
//   | id = ID COLON typ = type_expr { Param (id, Some typ, None) }
//   | id = ID COLON typ = type_expr EQ value = expr { Param (id, Some typ, Some value) }
//   ;

// type_expr:
//   | 

// body:
//   | t = token { t }
//   ;

// literal:
//   | n = INT { INT n }
//   | f = FLOAT { FLOAT f }
//   | s = STRING { STRING s }
//   | TRUE { TRUE }
//   | FALSE { FALSE }
//   | NONE { NONE }
//   ;

tokens:
  | EOF { [EOF] }
  | KERNEL_SEP { [KERNEL_SEP] }
  | DEF { [DEF] }
  | IF { [IF] }
  | ELSE { [ELSE] }
  | ELIF { [ELIF] }
  | FOR { [FOR] }
  | IN { [IN] }
  | RANGE { [RANGE] }
  | RETURN { [RETURN] }
  | NOT { [NOT] }
  | AND { [AND] }
  | OR { [OR] }
  | IS { [IS] }
  | NONE { [NONE] }
  | TRUE { [TRUE] }
  | FALSE { [FALSE] }
  | MIN { [MIN] }
  | PRINT { [PRINT] }
  | SUM { [SUM] }
  | ANY { [ANY] }
  | ALL { [ALL] }
  | ABS { [ABS] }
  | MAX { [MAX] }
  | ROUND { [ROUND] }
  | DIVMOD { [DIVMOD] }
  | LEN { [LEN] }
  | ZIP { [ZIP] }
  | SLICE { [SLICE] }
  | STR { [STR] }
  | TYPE { [TYPE] }
  | ISINSTANCE { [ISINSTANCE] }
  | TUPLE { [TUPLE] }
  | LIST { [LIST] }
  | DICT { [DICT] }
  | SET { [SET] }
  | TORCH { [TORCH] }
  | DL { [DL] }
  | LIBDEVICE { [LIBDEVICE] }
  | LIBSHMEM_DEVICE { [LIBSHMEM_DEVICE] }
  | TRITON_HELPERS { [TRITON_HELPERS] }
  | LANGUAGE { [LANGUAGE] }
  | TRITON { [TRITON] }
  | CEIL_DIV { [CEIL_DIV] }
  | EXP { [EXP] }
  | LOG { [LOG] }
  | ATOMIC_ADD { [ATOMIC_ADD] }
  | ATOMIC_CAS { [ATOMIC_CAS] }
  | ATOMIC_MIN { [ATOMIC_MIN] }
  | ATOMIC_XCHG { [ATOMIC_XCHG] }
  | LD { [LD] }
  | ST { [ST] }
  | TID { [TID] }
  | SYNC_THREADS { [SYNC_THREADS] }
  | SHFL_DOWN_SYNC_I32 { [SHFL_DOWN_SYNC_I32] }
  | SHFL_UP_SYNC_I32 { [SHFL_UP_SYNC_I32] }
  | SHFL_SYNC_I32 { [SHFL_SYNC_I32] }
  | BALLOT_SYNC { [BALLOT_SYNC] }
  | FFS { [FFS] }
  | TL_ARANGE { [TL_ARANGE] }
  | TL_ATOMIC_ADD { [TL_ATOMIC_ADD] }
  | TL_ATOMIC_CAS { [TL_ATOMIC_CAS] }
  | TL_ATOMIC_MIN { [TL_ATOMIC_MIN] }
  | TL_ATOMIC_XCHG { [TL_ATOMIC_XCHG] }
  | TL_ASSUME { [TL_ASSUME] }
  | TL_BFLOAT16 { [TL_BFLOAT16] }
  | TL_BROADCAST_TO { [TL_BROADCAST_TO] }
  | TL_CAST { [TL_CAST] }
  | TL_CDIV { [TL_CDIV] }
  | TL_CONSTEXPR { [TL_CONSTEXPR] }
  | TL_CUMSUM { [TL_CUMSUM] }
  | TL_DEBUG_BARRIER { [TL_DEBUG_BARRIER] }
  | TL_DEVICE_ASSERT { [TL_DEVICE_ASSERT] }
  | TL_DOT { [TL_DOT] }
  | TL_DOT_SCALED { [TL_DOT_SCALED] }
  | TL_DTYPE { [TL_DTYPE] }
  | TL_EXP { [TL_EXP] }
  | TL_EXPERIMENTAL_DESCRIPTOR_LOAD { [TL_EXPERIMENTAL_DESCRIPTOR_LOAD] }
  | TL_EXPERIMENTAL_DESCRIPTOR_STORE { [TL_EXPERIMENTAL_DESCRIPTOR_STORE] }
  | TL_EXTRA_CUDA_LIBDEVICE_ROUND { [TL_EXTRA_CUDA_LIBDEVICE_ROUND] }
  | TL_FDIV { [TL_FDIV] }
  | TL_FLOAT16 { [TL_FLOAT16] }
  | TL_FLOAT32 { [TL_FLOAT32] }
  | TL_FLOAT8E4NV { [TL_FLOAT8E4NV] }
  | TL_FLOAT8E5 { [TL_FLOAT8E5] }
  | TL_FLIP { [TL_FLIP] }
  | TL_FLOOR { [TL_FLOOR] }
  | TL_FMA { [TL_FMA] }
  | TL_FULL { [TL_FULL] }
  | TL_INT16 { [TL_INT16] }
  | TL_INT2 { [TL_INT2] }
  | TL_INT32 { [TL_INT32] }
  | TL_INT64 { [TL_INT64] }
  | TL_INT8 { [TL_INT8] }
  | TL_INTERLEAVE { [TL_INTERLEAVE] }
  | TL_JOIN { [TL_JOIN] }
  | TL_LOAD { [TL_LOAD] }
  | TL_LOG { [TL_LOG] }
  | TL_LOG2 { [TL_LOG2] }
  | TL_MAKE_BLOCK_PTR { [TL_MAKE_BLOCK_PTR] }
  | TL_MAKE_TENSOR_DESCRIPTOR { [TL_MAKE_TENSOR_DESCRIPTOR] }
  | TL_MATH_EXP2 { [TL_MATH_EXP2] }
  | TL_MATH_FAST_EXPF { [TL_MATH_FAST_EXPF] }
  | TL_MATH_LOG2 { [TL_MATH_LOG2] }
  | TL_MATH_MAX { [TL_MATH_MAX] }
  | TL_MATH_RSQRT { [TL_MATH_RSQRT] }
  | TL_MAX { [TL_MAX] }
  | TL_MAX_CONTIGUOUS { [TL_MAX_CONTIGUOUS] }
  | TL_MAXIMUM { [TL_MAXIMUM] }
  | TL_MIN { [TL_MIN] }
  | TL_MINIMUM { [TL_MINIMUM] }
  | TL_MULTIPLE_OF { [TL_MULTIPLE_OF] }
  | TL_NUM_PROGRAMS { [TL_NUM_PROGRAMS] }
  | TL_PABS { [TL_PABS] }
  | TL_PERMUTE { [TL_PERMUTE] }
  | TL_PI32_T { [TL_PI32_T] }
  | TL_POINTER_TYPE { [TL_POINTER_TYPE] }
  | TL_PROGRAM_ID { [TL_PROGRAM_ID] }
  | TL_RAND { [TL_RAND] }
  | TL_RANGE { [TL_RANGE] }
  | TL_RESHAPE { [TL_RESHAPE] }
  | TL_RSQRT { [TL_RSQRT] }
  | TL_SIGMOID { [TL_SIGMOID] }
  | TL_SPLIT { [TL_SPLIT] }
  | TL_SQRT { [TL_SQRT] }
  | TL_STANDARD_LOG2 { [TL_STANDARD_LOG2] }
  | TL_STATIC_ASSERT { [TL_STATIC_ASSERT] }
  | TL_STATIC_PRINT { [TL_STATIC_PRINT] }
  | TL_STATIC_RANGE { [TL_STATIC_RANGE] }
  | TL_STORE { [TL_STORE] }
  | TL_SUM { [TL_SUM] }
  | TL_SWIZZLE2D { [TL_SWIZZLE2D] }
  | TL_TENSOR { [TL_TENSOR] }
  | TL_TO { [TL_TO] }
  | TL_TRANS { [TL_TRANS] }
  | TL_UINT32 { [TL_UINT32] }
  | TL_VIEW { [TL_VIEW] }
  | TL_WHERE { [TL_WHERE] }
  | TL_ZEROS { [TL_ZEROS] }
  | PLUS { [PLUS] }
  | MINUS { [MINUS] }
  | TIMES { [TIMES] }
  | DIVIDE { [DIVIDE] }
  | GT { [GT] }
  | EQ { [EQ] }
  | ASSIGN { [ASSIGN] }
  | LPAREN { [LPAREN] }
  | RPAREN { [RPAREN] }
  | LBRACE { [LBRACE] }
  | RBRACE { [RBRACE] }
  | COLON { [COLON] }
  | COMMA { [COMMA] }
  | id = ID { [ID id] }
  | n = INT { [INT n] }
  | f = FLOAT { [FLOAT f] }
  | s = STRING { [STRING s] }
  | INT_TYPE { [INT_TYPE] }
  | FLOAT_TYPE { [FLOAT_TYPE] }
  | STR_TYPE { [STR_TYPE] }
  | BOOL_TYPE { [BOOL_TYPE] }
  | TUPLE_TYPE { [TUPLE_TYPE] }
  | LIST_TYPE { [LIST_TYPE] }
  | DICT_TYPE { [DICT_TYPE] }
  | SET_TYPE { [SET_TYPE] }
  | UNION { [UNION] }
  | LT { [LT] }
  ; 